(99, /*
	maybe it is true
	try it!
*/)
(87, #)
(10, include)
(89, stdio.h)
(87, #)
(10, include)
(89, string.h)
(87, #)
(10, include)
(89, unistd.h)
(87, #)
(10, include)
(89, ctype.h)
(87, #)
(10, include)
(89, sys/types.h)
(87, #)
(10, include)
(89, sys/stat.h)
(87, #)
(10, include)
(89, fcntl.h)
(12, char)
(10, prog)
(85, [)
(11, 8000)
(86, ])
(91, ,)
(10, token)
(85, [)
(11, 8000)
(86, ])
(91, ,)
(10, temp)
(85, [)
(11, 110)
(86, ])
(80, ;)
(12, char)
(10, ch)
(91, ,)
(10, t)
(80, ;)
(12, int)
(10, syn)
(91, ,)
(10, p)
(91, ,)
(10, m)
(39, =)
(11, 0)
(91, ,)
(10, row)
(91, ,)
(10, sum)
(39, =)
(11, 0)
(91, ,)
(10, len)
(91, ,)
(10, n)
(80, ;)
(12, const)
(12, char)
(13, *)
(10, rwtab)
(85, [)
(11, 32)
(86, ])
(39, =)
(83, {)
(89, volatile)
(91, ,)
(89, void)
(91, ,)
(89, struct)
(91, ,)
(89, switch)
(91, ,)
(89, typedef)
(91, ,)
(89, unsigned)
(91, ,)
(89, union)
(91, ,)
(89, goto)
(91, ,)
(89, if)
(91, ,)
(89, int)
(91, ,)
(89, long)
(91, ,)
(89, register)
(91, ,)
(89, return)
(91, ,)
(89, short)
(91, ,)
(89, signed)
(91, ,)
(89, sizeof)
(91, ,)
(89, static)
(91, ,)
(89, else)
(91, ,)
(89, enum)
(91, ,)
(89, extern)
(91, ,)
(89, float)
(91, ,)
(89, for)
(91, ,)
(89, double)
(91, ,)
(89, const)
(91, ,)
(89, continue)
(91, ,)
(89, default)
(91, ,)
(89, do)
(91, ,)
(89, auto)
(91, ,)
(89, break)
(91, ,)
(89, case)
(91, ,)
(89, char)
(91, ,)
(89, while)
(84, })
(80, ;)
(12, const)
(12, char)
(10, special)
(85, [)
(86, ])
(39, =)
(89, ;(){}[]#.?:,)
(80, ;)
(12, const)
(12, int)
(10, specialvalue)
(85, [)
(86, ])
(39, =)
(83, {)
(11, 80)
(91, ,)
(11, 81)
(91, ,)
(11, 82)
(91, ,)
(11, 83)
(91, ,)
(11, 84)
(91, ,)
(11, 85)
(91, ,)
(11, 86)
(91, ,)
(11, 87)
(91, ,)
(11, 88)
(91, ,)
(11, 89)
(91, ,)
(11, 90)
(91, ,)
(11, 91)
(84, })
(80, ;)
(12, void)
(10, scaner)
(81, ()
(82, ))
(80, ;)
(12, void)
(10, iskey)
(81, ()
(82, ))
(80, ;)
(12, int)
(10, isspecial)
(81, ()
(12, char)
(10, ch)
(82, ))
(80, ;)
(12, int)
(10, isquote)
(81, ()
(12, char)
(10, ch)
(82, ))
(80, ;)
(12, int)
(10, main)
(81, ()
(82, ))
(83, {)
(12, int)
(10, recv)
(80, ;)
(12, int)
(10, fd)
(39, =)
(10, open)
(81, ()
(89, 1.c)
(91, ,)
(10, O_RDONLY)
(82, ))
(80, ;)
(12, while)
(81, ()
(10, recv)
(39, =)
(10, read)
(81, ()
(10, fd)
(91, ,)
(10, temp)
(91, ,)
(11, 50)
(82, ))
(82, ))
(83, {)
(10, temp)
(85, [)
(10, recv)
(86, ])
(39, =)
(88, \0)
(80, ;)
(10, strcat)
(81, ()
(10, prog)
(91, ,)
(10, temp)
(82, ))
(80, ;)
(84, })
(10, close)
(81, ()
(10, fd)
(82, ))
(80, ;)
(10, FILE)
(13, *)
(10, fp)
(39, =)
(10, fopen)
(81, ()
(89, 1.in)
(91, ,)
(89, w)
(82, ))
(80, ;)
(10, p)
(39, =)
(11, 0)
(80, ;)
(10, row)
(39, =)
(11, 1)
(80, ;)
(10, len)
(39, =)
(10, strlen)
(81, ()
(10, prog)
(82, ))
(80, ;)
(12, do)
(83, {)
(10, scaner)
(81, ()
(82, ))
(80, ;)
(12, switch)
(81, ()
(10, syn)
(82, ))
(83, {)
(10, printf)
(81, ()
(89, syn: %d\n)
(91, ,)
(10, syn)
(82, ))
(80, ;)
(12, case)
(11, 11)
(90, :)
(98, //printf("(%d, %d)\n", syn, sum); )
(10, fprintf)
(81, ()
(10, fp)
(91, ,)
(89, (%d, %d)\n)
(91, ,)
(10, syn)
(91, ,)
(10, sum)
(82, ))
(80, ;)
(12, break)
(80, ;)
(12, case)
(17, -)
(11, 1)
(90, :)
(98, //printf("Error in row %d\n", row);)
(10, fprintf)
(81, ()
(10, fp)
(91, ,)
(89, Error in row %d\n)
(91, ,)
(10, row)
(82, ))
(80, ;)
(12, break)
(80, ;)
(12, case)
(17, -)
(11, 2)
(90, :)
(10, row)
(16, ++)
(12, break)
(80, ;)
(12, case)
(17, -)
(11, 3)
(90, :)
(12, break)
(80, ;)
(12, default)
(90, :)
(98, //printf("(%d, %s)\n", syn, token);)
(10, fprintf)
(81, ()
(10, fp)
(91, ,)
(89, (%d, %s)\n)
(91, ,)
(10, syn)
(91, ,)
(10, token)
(82, ))
(80, ;)
(12, break)
(80, ;)
(84, })
(84, })
(12, while)
(81, ()
(10, p)
(40, !=)
(10, len)
(82, ))
(80, ;)
(10, fclose)
(81, ()
(10, fp)
(82, ))
(80, ;)
(84, })
(12, void)
(10, scaner)
(81, ()
(82, ))
(83, {)
(10, memset)
(81, ()
(10, token)
(91, ,)
(11, 0)
(91, ,)
(12, sizeof)
(81, ()
(10, token)
(82, ))
(82, ))
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, isalpha)
(81, ()
(10, ch)
(82, ))
(62, ||)
(10, ch)
(45, ==)
(88, _)
(82, ))
(83, {)
(10, m)
(39, =)
(11, 0)
(80, ;)
(12, while)
(81, ()
(10, isalnum)
(81, ()
(10, ch)
(82, ))
(62, ||)
(10, ch)
(45, ==)
(88, _)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(84, })
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(88, \0)
(80, ;)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 10)
(80, ;)
(10, iskey)
(81, ()
(82, ))
(80, ;)
(84, })
(12, else)
(12, if)
(81, ()
(10, isdigit)
(81, ()
(10, ch)
(82, ))
(82, ))
(83, {)
(10, sum)
(39, =)
(11, 0)
(80, ;)
(12, while)
(81, ()
(10, isdigit)
(81, ()
(10, ch)
(82, ))
(82, ))
(83, {)
(10, sum)
(39, =)
(10, sum)
(13, *)
(11, 10)
(15, +)
(10, ch)
(17, -)
(88, 0)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(84, })
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 11)
(80, ;)
(12, if)
(81, ()
(10, sum)
(44, >)
(11, 2147483647)
(82, ))
(10, syn)
(39, =)
(17, -)
(11, 1)
(80, ;)
(84, })
(12, else)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88,  )
(62, ||)
(10, ch)
(45, ==)
(88, \t)
(82, ))
(83, {)
(10, t)
(39, =)
(10, ch)
(80, ;)
(12, while)
(81, ()
(10, ch)
(45, ==)
(10, t)
(82, ))
(83, {)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(84, })
(10, p)
(18, --)
(10, syn)
(39, =)
(17, -)
(11, 3)
(80, ;)
(84, })
(12, else)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, \n)
(82, ))
(83, {)
(10, syn)
(39, =)
(17, -)
(11, 2)
(80, ;)
(10, token)
(85, [)
(11, 0)
(86, ])
(39, =)
(88, \0)
(80, ;)
(84, })
(12, else)
(12, if)
(81, ()
(81, ()
(10, n)
(39, =)
(10, isspecial)
(81, ()
(10, ch)
(82, ))
(82, ))
(40, !=)
(17, -)
(11, 1)
(82, ))
(83, {)
(10, syn)
(39, =)
(11, 80)
(15, +)
(10, n)
(80, ;)
(10, token)
(85, [)
(11, 0)
(86, ])
(39, =)
(10, ch)
(80, ;)
(84, })
(12, else)
(12, if)
(81, ()
(10, isquote)
(81, ()
(10, ch)
(82, ))
(82, ))
(83, {)
(12, char)
(10, t)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(10, t)
(45, ==)
(88, \')
(89, ?)
(11, 88)
(90, :)
(11, 89)
(80, ;)
(10, m)
(39, =)
(11, 0)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, while)
(81, ()
(10, ch)
(40, !=)
(10, t)
(82, ))
(83, {)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, \\)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(84, })
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(84, })
(84, })
(12, else)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, ~)
(82, ))
(83, {)
(10, token)
(85, [)
(11, 0)
(86, ])
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(11, 20)
(80, ;)
(84, })
(12, else)
(83, {)
(10, m)
(39, =)
(11, 0)
(80, ;)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(12, switch)
(81, ()
(10, ch)
(82, ))
(83, {)
(12, case)
(88, *)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(11, 31)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 13)
(80, ;)
(84, })
(12, break)
(80, ;)
(12, case)
(88, /)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(11, 32)
(80, ;)
(84, })
(12, else)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, *)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, while)
(81, ()
(81, ()
(10, ch)
(40, !=)
(88, *)
(62, ||)
(10, prog)
(85, [)
(10, p)
(86, ])
(40, !=)
(88, /)
(82, ))
(60, &&)
(10, m)
(42, <)
(11, 8000)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(84, })
(12, if)
(81, ()
(10, m)
(43, >=)
(11, 8000)
(82, ))
(83, {)
(10, syn)
(39, =)
(17, -)
(11, 1)
(80, ;)
(84, })
(12, else)
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(10, syn)
(39, =)
(11, 99)
(80, ;)
(84, })
(84, })
(12, else)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, /)
(82, ))
(83, {)
(12, while)
(81, ()
(10, ch)
(40, !=)
(88, \n)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(84, })
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 98)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 14)
(80, ;)
(84, })
(12, break)
(80, ;)
(12, case)
(88, +)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, =)
(62, ||)
(10, ch)
(45, ==)
(88, +)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(10, syn)
(39, =)
(10, ch)
(45, ==)
(88, =)
(89, ?)
(11, 29)
(90, :)
(11, 16)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 15)
(80, ;)
(84, })
(12, break)
(80, ;)
(12, case)
(88, -)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, =)
(62, ||)
(10, ch)
(45, ==)
(88, -)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(10, syn)
(39, =)
(10, ch)
(45, ==)
(88, =)
(89, ?)
(11, 30)
(90, :)
(11, 18)
(80, ;)
(84, })
(12, else)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, >)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(10, syn)
(39, =)
(11, 71)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 17)
(80, ;)
(84, })
(12, break)
(80, ;)
(12, case)
(88, %)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(11, 33)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 19)
(80, ;)
(84, })
(12, break)
(80, ;)
(12, case)
(88, !)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(11, 40)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 21)
(80, ;)
(84, })
(12, break)
(80, ;)
(12, case)
(88, &)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, &)
(62, ||)
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(10, ch)
(45, ==)
(88, &)
(89, ?)
(11, 60)
(90, :)
(11, 34)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 22)
(80, ;)
(84, })
(12, break)
(80, ;)
(12, case)
(88, |)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, |)
(62, ||)
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(10, ch)
(45, ==)
(88, |)
(89, ?)
(11, 62)
(90, :)
(11, 35)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 23)
(80, ;)
(84, })
(12, break)
(80, ;)
(12, case)
(88, ^)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(11, 36)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 24)
(80, ;)
(84, })
(12, break)
(80, ;)
(12, case)
(88, <)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, >)
(62, ||)
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(10, ch)
(45, ==)
(88, >)
(89, ?)
(11, 40)
(90, :)
(11, 41)
(80, ;)
(84, })
(12, else)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, <)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(11, 37)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 25)
(80, ;)
(84, })
(84, })
(12, else)
(83, {)
(10, syn)
(39, =)
(11, 42)
(80, ;)
(10, p)
(18, --)
(84, })
(12, break)
(80, ;)
(12, case)
(88, >)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(11, 43)
(80, ;)
(84, })
(12, else)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, >)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(11, 38)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 26)
(80, ;)
(84, })
(84, })
(12, else)
(83, {)
(10, syn)
(39, =)
(11, 44)
(80, ;)
(10, p)
(18, --)
(84, })
(12, break)
(80, ;)
(12, case)
(88, =)
(90, :)
(10, ch)
(39, =)
(10, prog)
(85, [)
(10, p)
(16, ++)
(80, ;)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, =)
(82, ))
(83, {)
(10, token)
(85, [)
(10, m)
(16, ++)
(39, =)
(10, ch)
(80, ;)
(10, syn)
(39, =)
(11, 45)
(80, ;)
(84, })
(12, else)
(83, {)
(10, p)
(18, --)
(10, syn)
(39, =)
(11, 39)
(80, ;)
(84, })
(12, break)
(80, ;)
(12, default)
(90, :)
(10, syn)
(39, =)
(17, -)
(11, 1)
(80, ;)
(12, break)
(80, ;)
(84, })
(84, })
(84, })
(12, void)
(10, iskey)
(81, ()
(82, ))
(83, {)
(12, int)
(10, i)
(80, ;)
(12, for)
(81, ()
(10, i)
(39, =)
(11, 0)
(80, ;)
(10, i)
(42, <)
(11, 32)
(80, ;)
(10, i)
(16, ++)
(12, if)
(81, ()
(10, strcmp)
(81, ()
(10, token)
(91, ,)
(10, rwtab)
(85, [)
(10, i)
(86, ])
(82, ))
(45, ==)
(11, 0)
(82, ))
(83, {)
(10, syn)
(39, =)
(11, 12)
(80, ;)
(12, break)
(80, ;)
(84, })
(84, })
(12, int)
(10, isquote)
(81, ()
(12, char)
(10, ch)
(82, ))
(83, {)
(12, if)
(81, ()
(10, ch)
(45, ==)
(88, \')
(62, ||)
(10, ch)
(45, ==)
(88, \")
(82, ))
(12, return)
(11, 1)
(80, ;)
(12, return)
(11, 0)
(80, ;)
(84, })
(12, int)
(10, isspecial)
(81, ()
(12, char)
(10, ch)
(82, ))
(83, {)
(12, int)
(10, i)
(80, ;)
(12, for)
(81, ()
(10, i)
(39, =)
(11, 0)
(80, ;)
(10, i)
(42, <)
(11, 12)
(80, ;)
(16, ++)
(82, ))
(83, {)
(12, if)
(81, ()
(10, ch)
(45, ==)
(10, special)
(85, [)
(10, i)
(86, ])
(82, ))
(12, return)
(10, i)
(80, ;)
(84, })
(12, return)
(17, -)
(11, 1)
(80, ;)
(84, })
